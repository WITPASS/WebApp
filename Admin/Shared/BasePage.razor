@typeparam TItem
<h3>@Title</h3>
@if (Item == null)
{
    <p>@Summary</p>
    <div style="margin-bottom:4px">
        <button @onclick="@OnAdd" class="btn btn-primary btn-sm">Add New</button>
        @TopControls
    </div>
    <div class="table-responsive">
        <table class="table table-sm table-hover">
            <thead class="thead-light">
                <tr>
                    @TableHeader
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Items)
                {
                    <tr>
                        @TableBody(item)
                        <td>
                            <button @onclick="@(async ()=> await OnEdit.InvokeAsync(item))" class="btn btn-link btn-sm">Edit</button>
                            <Confirm OnClick="@(async ()=> await OnDelete.InvokeAsync(item))" Ask="Are you sure you want to delete?" Class="btn btn-link btn-sm">Delete</Confirm>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
else
{
    <div class="alert alert-info" role="alert">@Action</div>
    <EditForm Model="Item">
        <DataAnnotationsValidator />
        <ValidationSummary />
        @FormBody(Item)
        <div>
            <button @onclick="@OnFormSave" class="btn btn-primary btn-sm" style="width:75px">Save</button>
            <Confirm OnClick="@OnFormCancel" Ask="Are you sure you want to cancel changes?" Class="btn btn-light">Cancel</Confirm>
        </div>
    </EditForm>
}
@code {
    [Parameter]
    string Title { get; set; }

    [Parameter]
    string Summary { get; set; }

    [Parameter]
    RenderFragment TopControls { get; set; }

    [Parameter]
    RenderFragment TableHeader { get; set; }

    [Parameter]
    RenderFragment<TItem> TableBody { get; set; }

    [Parameter]
    RenderFragment<TItem> FormBody { get; set; }

    [Parameter]
    EventCallback OnFormSave { get; set; }

    [Parameter]
    EventCallback OnFormCancel { get; set; }

    [Parameter]
    EventCallback OnAdd { get; set; }

    [Parameter]
    EventCallback<TItem> OnEdit { get; set; }

    [Parameter]
    EventCallback<TItem> OnDelete { get; set; }

    [Parameter]
    IList<TItem> Items { get; set; }

    [Parameter]
    TItem Item { get; set; }

    string Action => ((Guid) typeof(TItem).GetProperty("Id").GetValue(Item)) == Guid.Empty ? "Add New" : "Edit";
}
