@inject IJSRuntime js
<img width="@Width" height="@Height" src="@Url" class="@Class" />
<input @ref="inputFile" class="form-control" type="file" @onchange="@ImageSelected" />

@code {
    ElementRef inputFile;

    [Parameter]
    string Url { get; set; }

    [Parameter]
    string Class { get; set; }

    [Parameter]
    int Size { get; set; }

    [Parameter]
    EventCallback<int> SizeChanged { get; set; }

    [Parameter]
    int Width { get; set; }

    [Parameter]
    EventCallback<int> WidthChanged { get; set; }

    [Parameter]
    int Height { get; set; }

    [Parameter]
    EventCallback<int> HeightChanged { get; set; }

    [Parameter]
    byte[] Data { get; set; }

    [Parameter]
    EventCallback<byte[]> DataChanged { get; set; }

    [Parameter]
    string Meta { get; set; }

    [Parameter]
    EventCallback<string> MetaChanged { get; set; }

    [Parameter]
    int Version { get; set; }

    [Parameter]
    EventCallback<int> VersionChanged { get; set; }

    protected override void OnParametersSet()
    {
        if (Data != null && Data.Length > 0 && Meta != null)
        {
            var base64String = Convert.ToBase64String(Data);
            Url = $"data:{Meta};base64,{base64String}";
        }

        if(Url.Contains("00000000-0000-0000-0000-000000000000"))
        {
            Url = null;
        }
    }

    async Task ImageSelected()
    {
        var info = await js.InvokeAsync<string[]>("getImageInfo", inputFile);

        var data = info[3].Split(',');
        await DataChanged.InvokeAsync(Convert.FromBase64String(data[1]));
        await MetaChanged.InvokeAsync(data[0].Split(';')[0].Split(':')[1]);

        await WidthChanged.InvokeAsync(int.Parse(info[0]));
        await HeightChanged.InvokeAsync(int.Parse(info[1]));
        await SizeChanged.InvokeAsync(int.Parse(info[2]));
        await VersionChanged.InvokeAsync(Version + 1);
    }
}